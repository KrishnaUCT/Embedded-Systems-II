ARM GAS  /tmp/ccEr2V2P.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/main.c"
  18              		.section	.text.MX_GPIO_Init,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	MX_GPIO_Init:
  25              	.LFB42:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2025 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include <stdint.h>
  25:Core/Src/main.c **** #include "stm32f0xx.h"
  26:Core/Src/main.c **** /* USER CODE END Includes */
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  30:Core/Src/main.c **** #define MAX_ITER 100
  31:Core/Src/main.c **** /* USER CODE END PTD */
  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
ARM GAS  /tmp/ccEr2V2P.s 			page 2


  34:Core/Src/main.c **** /* USER CODE BEGIN PD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* USER CODE END PD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  39:Core/Src/main.c **** /* USER CODE BEGIN PM */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* USER CODE END PM */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** /* USER CODE BEGIN PV */
  46:Core/Src/main.c **** //TODO: Define and initialise the global varibales required
  47:Core/Src/main.c **** int image_sizes[] = {128, 160, 192, 224, 256};
  48:Core/Src/main.c **** uint64_t executions[5];
  49:Core/Src/main.c **** uint64_t checksums[5];
  50:Core/Src/main.c **** int completed_executions = 0;
  51:Core/Src/main.c **** uint32_t start_time = 0;
  52:Core/Src/main.c **** uint32_t end_time = 0;
  53:Core/Src/main.c **** /*
  54:Core/Src/main.c ****   start_time
  55:Core/Src/main.c ****   end_time
  56:Core/Src/main.c ****   execution_time 
  57:Core/Src/main.c ****   checksum: should be uint64_t
  58:Core/Src/main.c ****   initial width and height maybe or you might opt for an array??
  59:Core/Src/main.c **** */
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** /* USER CODE END PV */
  62:Core/Src/main.c **** 
  63:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  64:Core/Src/main.c **** void SystemClock_Config(void);
  65:Core/Src/main.c **** static void MX_GPIO_Init(void);
  66:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  67:Core/Src/main.c **** uint64_t calculate_mandelbrot_fixed_point_arithmetic(int width, int height, int max_iterations);
  68:Core/Src/main.c **** uint64_t calculate_mandelbrot_double(int width, int height, int max_iterations);
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** 
  71:Core/Src/main.c **** /* USER CODE END PFP */
  72:Core/Src/main.c **** 
  73:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  74:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  75:Core/Src/main.c **** 
  76:Core/Src/main.c **** /* USER CODE END 0 */
  77:Core/Src/main.c **** 
  78:Core/Src/main.c **** /**
  79:Core/Src/main.c ****   * @brief  The application entry point.
  80:Core/Src/main.c ****   * @retval int
  81:Core/Src/main.c ****   */
  82:Core/Src/main.c **** int main(void)
  83:Core/Src/main.c **** {
  84:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  85:Core/Src/main.c **** 
  86:Core/Src/main.c ****   /* USER CODE END 1 */
  87:Core/Src/main.c **** 
  88:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  89:Core/Src/main.c **** 
  90:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
ARM GAS  /tmp/ccEr2V2P.s 			page 3


  91:Core/Src/main.c ****   HAL_Init();
  92:Core/Src/main.c **** 
  93:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  94:Core/Src/main.c **** 
  95:Core/Src/main.c ****   /* USER CODE END Init */
  96:Core/Src/main.c **** 
  97:Core/Src/main.c ****   /* Configure the system clock */
  98:Core/Src/main.c ****   SystemClock_Config();
  99:Core/Src/main.c **** 
 100:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 101:Core/Src/main.c **** 
 102:Core/Src/main.c ****   /* USER CODE END SysInit */
 103:Core/Src/main.c **** 
 104:Core/Src/main.c ****   /* Initialize all configured peripherals */
 105:Core/Src/main.c ****   MX_GPIO_Init();
 106:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 107:Core/Src/main.c ****   //TODO: Turn on LED 0 to signify the start of the operation
 108:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 109:Core/Src/main.c ****   
 110:Core/Src/main.c ****   for (int i = 0; i < sizeof(image_sizes); i++){
 111:Core/Src/main.c **** 
 112:Core/Src/main.c **** 	  int width = image_sizes[i];
 113:Core/Src/main.c **** 	  int height = image_sizes[i];
 114:Core/Src/main.c **** 
 115:Core/Src/main.c **** 	  //TODO: Record the start time
 116:Core/Src/main.c **** 	  start_time = HAL_GetTick();
 117:Core/Src/main.c **** 
 118:Core/Src/main.c **** 
 119:Core/Src/main.c **** 	  //TODO: Call the Mandelbrot Function and store the output in the checksum variable defined initi
 120:Core/Src/main.c **** 	  uint64_t checksum = calculate_mandelbrot_double(width, height, MAX_ITER);
 121:Core/Src/main.c **** 	  //uint64_t checksum = calculate_mandelbrot_fixed_point_arithmetic(width, height, MAX_ITER);
 122:Core/Src/main.c **** 
 123:Core/Src/main.c **** 	  //TODO: Record the end time
 124:Core/Src/main.c **** 	  end_time = HAL_GetTick();
 125:Core/Src/main.c **** 
 126:Core/Src/main.c **** 	  executions[completed_executions] = end_time - start_time;
 127:Core/Src/main.c **** 	  checksums[completed_executions] = checksum;
 128:Core/Src/main.c **** 	  completed_executions++;
 129:Core/Src/main.c **** 
 130:Core/Src/main.c **** 	  //TODO: Calculate the execution time
 131:Core/Src/main.c **** 
 132:Core/Src/main.c **** 
 133:Core/Src/main.c **** 	  //TODO: Turn on LED 1 to signify the end of the operation
 134:Core/Src/main.c **** 	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 135:Core/Src/main.c **** 
 136:Core/Src/main.c **** 	  //TODO: Hold the LEDs on for a 1s delay
 137:Core/Src/main.c **** 	  HAL_Delay(1000);
 138:Core/Src/main.c **** 
 139:Core/Src/main.c **** 	  //TODO: Turn off the LEDs
 140:Core/Src/main.c **** 	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 141:Core/Src/main.c ****   
 142:Core/Src/main.c ****   }
 143:Core/Src/main.c ****   
 144:Core/Src/main.c ****   //TODO: Turn off all LEDs
 145:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 146:Core/Src/main.c ****   
 147:Core/Src/main.c **** 
ARM GAS  /tmp/ccEr2V2P.s 			page 4


 148:Core/Src/main.c ****   /* USER CODE END 2 */
 149:Core/Src/main.c **** 
 150:Core/Src/main.c ****   /* Infinite loop */
 151:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 152:Core/Src/main.c ****   while (1)
 153:Core/Src/main.c ****   {
 154:Core/Src/main.c ****     /* USER CODE END WHILE */
 155:Core/Src/main.c **** 	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 156:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 157:Core/Src/main.c ****   }
 158:Core/Src/main.c ****   /* USER CODE END 3 */
 159:Core/Src/main.c **** }
 160:Core/Src/main.c **** 
 161:Core/Src/main.c **** /**
 162:Core/Src/main.c ****   * @brief System Clock Configuration
 163:Core/Src/main.c ****   * @retval None
 164:Core/Src/main.c ****   */
 165:Core/Src/main.c **** void SystemClock_Config(void)
 166:Core/Src/main.c **** {
 167:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 168:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 169:Core/Src/main.c **** 
 170:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 171:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 172:Core/Src/main.c ****   */
 173:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 174:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 175:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 176:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 177:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 178:Core/Src/main.c ****   {
 179:Core/Src/main.c ****     Error_Handler();
 180:Core/Src/main.c ****   }
 181:Core/Src/main.c **** 
 182:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 183:Core/Src/main.c ****   */
 184:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 185:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 186:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 187:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 188:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 189:Core/Src/main.c **** 
 190:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 191:Core/Src/main.c ****   {
 192:Core/Src/main.c ****     Error_Handler();
 193:Core/Src/main.c ****   }
 194:Core/Src/main.c **** }
 195:Core/Src/main.c **** 
 196:Core/Src/main.c **** /**
 197:Core/Src/main.c ****   * @brief GPIO Initialization Function
 198:Core/Src/main.c ****   * @param None
 199:Core/Src/main.c ****   * @retval None
 200:Core/Src/main.c ****   */
 201:Core/Src/main.c **** static void MX_GPIO_Init(void)
 202:Core/Src/main.c **** {
  26              		.loc 1 202 1 view -0
  27              		.cfi_startproc
ARM GAS  /tmp/ccEr2V2P.s 			page 5


  28              		@ args = 0, pretend = 0, frame = 32
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 10B5     		push	{r4, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 4, -8
  34              		.cfi_offset 14, -4
  35 0002 88B0     		sub	sp, sp, #32
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 40
 203:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  38              		.loc 1 203 3 view .LVU1
  39              		.loc 1 203 20 is_stmt 0 view .LVU2
  40 0004 1422     		movs	r2, #20
  41 0006 0021     		movs	r1, #0
  42 0008 03A8     		add	r0, sp, #12
  43 000a FFF7FEFF 		bl	memset
  44              	.LVL0:
 204:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 205:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 206:Core/Src/main.c **** 
 207:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 208:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  45              		.loc 1 208 3 is_stmt 1 view .LVU3
  46              	.LBB4:
  47              		.loc 1 208 3 view .LVU4
  48              		.loc 1 208 3 view .LVU5
  49 000e 134B     		ldr	r3, .L2
  50 0010 5A69     		ldr	r2, [r3, #20]
  51 0012 8021     		movs	r1, #128
  52 0014 C902     		lsls	r1, r1, #11
  53 0016 0A43     		orrs	r2, r1
  54 0018 5A61     		str	r2, [r3, #20]
  55              		.loc 1 208 3 view .LVU6
  56 001a 5A69     		ldr	r2, [r3, #20]
  57 001c 0A40     		ands	r2, r1
  58 001e 0192     		str	r2, [sp, #4]
  59              		.loc 1 208 3 view .LVU7
  60 0020 019A     		ldr	r2, [sp, #4]
  61              	.LBE4:
  62              		.loc 1 208 3 view .LVU8
 209:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  63              		.loc 1 209 3 view .LVU9
  64              	.LBB5:
  65              		.loc 1 209 3 view .LVU10
  66              		.loc 1 209 3 view .LVU11
  67 0022 5A69     		ldr	r2, [r3, #20]
  68 0024 8021     		movs	r1, #128
  69 0026 8902     		lsls	r1, r1, #10
  70 0028 0A43     		orrs	r2, r1
  71 002a 5A61     		str	r2, [r3, #20]
  72              		.loc 1 209 3 view .LVU12
  73 002c 5B69     		ldr	r3, [r3, #20]
  74 002e 0B40     		ands	r3, r1
  75 0030 0293     		str	r3, [sp, #8]
  76              		.loc 1 209 3 view .LVU13
  77 0032 029B     		ldr	r3, [sp, #8]
ARM GAS  /tmp/ccEr2V2P.s 			page 6


  78              	.LBE5:
  79              		.loc 1 209 3 view .LVU14
 210:Core/Src/main.c **** 
 211:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 212:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
  80              		.loc 1 212 3 view .LVU15
  81 0034 0A4C     		ldr	r4, .L2+4
  82 0036 0022     		movs	r2, #0
  83 0038 0321     		movs	r1, #3
  84 003a 2000     		movs	r0, r4
  85 003c FFF7FEFF 		bl	HAL_GPIO_WritePin
  86              	.LVL1:
 213:Core/Src/main.c **** 
 214:Core/Src/main.c ****   /*Configure GPIO pins : PB0 PB1 */
 215:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  87              		.loc 1 215 3 view .LVU16
  88              		.loc 1 215 23 is_stmt 0 view .LVU17
  89 0040 0323     		movs	r3, #3
  90 0042 0393     		str	r3, [sp, #12]
 216:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  91              		.loc 1 216 3 is_stmt 1 view .LVU18
  92              		.loc 1 216 24 is_stmt 0 view .LVU19
  93 0044 023B     		subs	r3, r3, #2
  94 0046 0493     		str	r3, [sp, #16]
 217:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  95              		.loc 1 217 3 is_stmt 1 view .LVU20
  96              		.loc 1 217 24 is_stmt 0 view .LVU21
  97 0048 0023     		movs	r3, #0
  98 004a 0593     		str	r3, [sp, #20]
 218:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  99              		.loc 1 218 3 is_stmt 1 view .LVU22
 100              		.loc 1 218 25 is_stmt 0 view .LVU23
 101 004c 0693     		str	r3, [sp, #24]
 219:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 102              		.loc 1 219 3 is_stmt 1 view .LVU24
 103 004e 03A9     		add	r1, sp, #12
 104 0050 2000     		movs	r0, r4
 105 0052 FFF7FEFF 		bl	HAL_GPIO_Init
 106              	.LVL2:
 220:Core/Src/main.c **** 
 221:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 222:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 223:Core/Src/main.c **** }
 107              		.loc 1 223 1 is_stmt 0 view .LVU25
 108 0056 08B0     		add	sp, sp, #32
 109              		@ sp needed
 110 0058 10BD     		pop	{r4, pc}
 111              	.L3:
 112 005a C046     		.align	2
 113              	.L2:
 114 005c 00100240 		.word	1073876992
 115 0060 00040048 		.word	1207960576
 116              		.cfi_endproc
 117              	.LFE42:
 119              		.global	__aeabi_ldivmod
 120              		.global	__aeabi_lmul
 121              		.section	.text.calculate_mandelbrot_fixed_point_arithmetic,"ax",%progbits
ARM GAS  /tmp/ccEr2V2P.s 			page 7


 122              		.align	1
 123              		.global	calculate_mandelbrot_fixed_point_arithmetic
 124              		.syntax unified
 125              		.code	16
 126              		.thumb_func
 128              	calculate_mandelbrot_fixed_point_arithmetic:
 129              	.LVL3:
 130              	.LFB43:
 224:Core/Src/main.c **** 
 225:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 226:Core/Src/main.c **** //TODO: Mandelbroat using variable type integers and fixed point arithmetic
 227:Core/Src/main.c **** uint64_t calculate_mandelbrot_fixed_point_arithmetic(int width, int height, int max_iterations){
 131              		.loc 1 227 96 is_stmt 1 view -0
 132              		.cfi_startproc
 133              		@ args = 0, pretend = 0, frame = 56
 134              		@ frame_needed = 0, uses_anonymous_args = 0
 135              		.loc 1 227 96 is_stmt 0 view .LVU27
 136 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 137              	.LCFI2:
 138              		.cfi_def_cfa_offset 20
 139              		.cfi_offset 4, -20
 140              		.cfi_offset 5, -16
 141              		.cfi_offset 6, -12
 142              		.cfi_offset 7, -8
 143              		.cfi_offset 14, -4
 144 0002 DE46     		mov	lr, fp
 145 0004 5746     		mov	r7, r10
 146 0006 4E46     		mov	r6, r9
 147 0008 4546     		mov	r5, r8
 148 000a E0B5     		push	{r5, r6, r7, lr}
 149              	.LCFI3:
 150              		.cfi_def_cfa_offset 36
 151              		.cfi_offset 8, -36
 152              		.cfi_offset 9, -32
 153              		.cfi_offset 10, -28
 154              		.cfi_offset 11, -24
 155 000c 8FB0     		sub	sp, sp, #60
 156              	.LCFI4:
 157              		.cfi_def_cfa_offset 96
 158 000e 0892     		str	r2, [sp, #32]
 228:Core/Src/main.c ****     uint64_t mandelbrot_sum = 0;
 159              		.loc 1 228 5 is_stmt 1 view .LVU28
 160              	.LVL4:
 229:Core/Src/main.c **** 
 230:Core/Src/main.c ****     //TODO: Complete the function implementation
 231:Core/Src/main.c ****     const int32_t SCALE = 1 << 16;
 161              		.loc 1 231 5 view .LVU29
 232:Core/Src/main.c ****     const int32_t ESCAPE = 4 * SCALE;
 162              		.loc 1 232 5 view .LVU30
 233:Core/Src/main.c **** 
 234:Core/Src/main.c ****     for (int y = 0; y < height; y++){
 163              		.loc 1 234 5 view .LVU31
 164              	.LBB6:
 165              		.loc 1 234 10 view .LVU32
 166              		.loc 1 234 14 is_stmt 0 view .LVU33
 167 0010 0023     		movs	r3, #0
 168 0012 9846     		mov	r8, r3
ARM GAS  /tmp/ccEr2V2P.s 			page 8


 169              	.LBE6:
 228:Core/Src/main.c **** 
 170              		.loc 1 228 14 view .LVU34
 171 0014 0023     		movs	r3, #0
 172 0016 0024     		movs	r4, #0
 173 0018 0A93     		str	r3, [sp, #40]
 174 001a 0B94     		str	r4, [sp, #44]
 175 001c 0990     		str	r0, [sp, #36]
 176 001e C346     		mov	fp, r8
 177 0020 0D91     		str	r1, [sp, #52]
 178              	.LBB13:
 179              		.loc 1 234 5 view .LVU35
 180 0022 7AE0     		b	.L5
 181              	.LVL5:
 182              	.L12:
 183              	.LBB7:
 184              	.LBB8:
 185              	.LBB9:
 235:Core/Src/main.c ****     	for (int x = 0; x < width; x++){
 236:Core/Src/main.c ****     		int32_t x0 = (int32_t)(((int64_t)x * (int64_t)(3.5f * SCALE)) / width - (int64_t)(2.5f * SCAL
 237:Core/Src/main.c ****     		int32_t y0 = (int32_t)(((int64_t)y * (int64_t)(2.0f * SCALE)) / width - (int64_t)(1.0f * SCAL
 238:Core/Src/main.c **** 
 239:Core/Src/main.c ****     		int32_t xi = 0;
 240:Core/Src/main.c ****     		int32_t yi = 0;
 241:Core/Src/main.c ****     		int iteration = 0;
 242:Core/Src/main.c **** 
 243:Core/Src/main.c ****     		while (iteration < max_iterations) {
 244:Core/Src/main.c ****     			int32_t xi2 = (int32_t) (((int64_t)xi*(int64_t)xi) >> 16);
 245:Core/Src/main.c ****     			int32_t yi2 = (int32_t) (((int64_t)yi*(int64_t)yi) >> 16);
 246:Core/Src/main.c **** 
 247:Core/Src/main.c ****     			if (xi2 + yi2 > ESCAPE){
 248:Core/Src/main.c ****     				break;
 249:Core/Src/main.c ****     			}
 250:Core/Src/main.c **** 
 251:Core/Src/main.c ****     			int32_t tmp = xi2 - yi2 + x0;
 186              		.loc 1 251 8 is_stmt 1 view .LVU36
 187              		.loc 1 251 26 is_stmt 0 view .LVU37
 188 0024 641A     		subs	r4, r4, r1
 189              	.LVL6:
 190              		.loc 1 251 16 view .LVU38
 191 0026 5444     		add	r4, r4, r10
 192              	.LVL7:
 252:Core/Src/main.c ****     			yi = (int32_t)((((int64_t)xi*yi) << 1) >> 16) + y0;
 193              		.loc 1 252 8 is_stmt 1 view .LVU39
 194              		.loc 1 252 36 is_stmt 0 view .LVU40
 195 0028 2A00     		movs	r2, r5
 196 002a 3B00     		movs	r3, r7
 197 002c 0198     		ldr	r0, [sp, #4]
 198 002e 3100     		movs	r1, r6
 199              	.LVL8:
 200              		.loc 1 252 36 view .LVU41
 201 0030 FFF7FEFF 		bl	__aeabi_lmul
 202              	.LVL9:
 203 0034 0200     		movs	r2, r0
 204 0036 0B00     		movs	r3, r1
 205              		.loc 1 252 41 view .LVU42
 206 0038 9218     		adds	r2, r2, r2
ARM GAS  /tmp/ccEr2V2P.s 			page 9


 207 003a 5B41     		adcs	r3, r3, r3
 208 003c 1100     		movs	r1, r2
 209              		.loc 1 252 47 view .LVU43
 210 003e 1B04     		lsls	r3, r3, #16
 211 0040 0A0C     		lsrs	r2, r1, #16
 212 0042 1A43     		orrs	r2, r3
 213              		.loc 1 252 11 view .LVU44
 214 0044 4A44     		add	r2, r2, r9
 215 0046 1500     		movs	r5, r2
 216              	.LVL10:
 253:Core/Src/main.c ****     			xi = tmp;
 217              		.loc 1 253 8 is_stmt 1 view .LVU45
 254:Core/Src/main.c **** 
 255:Core/Src/main.c ****     			iteration++;
 218              		.loc 1 255 8 view .LVU46
 219              		.loc 1 255 17 is_stmt 0 view .LVU47
 220 0048 0123     		movs	r3, #1
 221 004a 9C46     		mov	ip, r3
 222 004c E044     		add	r8, r8, ip
 223              	.LVL11:
 224              	.L6:
 225              		.loc 1 255 17 view .LVU48
 226              	.LBE9:
 243:Core/Src/main.c ****     			int32_t xi2 = (int32_t) (((int64_t)xi*(int64_t)xi) >> 16);
 227              		.loc 1 243 24 is_stmt 1 view .LVU49
 228 004e 089B     		ldr	r3, [sp, #32]
 229 0050 9845     		cmp	r8, r3
 230 0052 19DA     		bge	.L7
 231              	.LBB10:
 244:Core/Src/main.c ****     			int32_t yi2 = (int32_t) (((int64_t)yi*(int64_t)yi) >> 16);
 232              		.loc 1 244 8 view .LVU50
 244:Core/Src/main.c ****     			int32_t yi2 = (int32_t) (((int64_t)yi*(int64_t)yi) >> 16);
 233              		.loc 1 244 34 is_stmt 0 view .LVU51
 234 0054 0194     		str	r4, [sp, #4]
 235 0056 E617     		asrs	r6, r4, #31
 244:Core/Src/main.c ****     			int32_t yi2 = (int32_t) (((int64_t)yi*(int64_t)yi) >> 16);
 236              		.loc 1 244 45 view .LVU52
 237 0058 2200     		movs	r2, r4
 238 005a 3300     		movs	r3, r6
 239 005c 2000     		movs	r0, r4
 240 005e 3100     		movs	r1, r6
 241 0060 FFF7FEFF 		bl	__aeabi_lmul
 242              	.LVL12:
 244:Core/Src/main.c ****     			int32_t yi2 = (int32_t) (((int64_t)yi*(int64_t)yi) >> 16);
 243              		.loc 1 244 59 view .LVU53
 244 0064 0C04     		lsls	r4, r1, #16
 245              	.LVL13:
 244:Core/Src/main.c ****     			int32_t yi2 = (int32_t) (((int64_t)yi*(int64_t)yi) >> 16);
 246              		.loc 1 244 59 view .LVU54
 247 0066 000C     		lsrs	r0, r0, #16
 248 0068 0443     		orrs	r4, r0
 249              	.LVL14:
 245:Core/Src/main.c **** 
 250              		.loc 1 245 8 is_stmt 1 view .LVU55
 245:Core/Src/main.c **** 
 251              		.loc 1 245 34 is_stmt 0 view .LVU56
 252 006a EF17     		asrs	r7, r5, #31
ARM GAS  /tmp/ccEr2V2P.s 			page 10


 245:Core/Src/main.c **** 
 253              		.loc 1 245 45 view .LVU57
 254 006c 2A00     		movs	r2, r5
 255 006e 3B00     		movs	r3, r7
 256 0070 2800     		movs	r0, r5
 257 0072 3900     		movs	r1, r7
 258 0074 FFF7FEFF 		bl	__aeabi_lmul
 259              	.LVL15:
 245:Core/Src/main.c **** 
 260              		.loc 1 245 59 view .LVU58
 261 0078 0904     		lsls	r1, r1, #16
 262 007a 000C     		lsrs	r0, r0, #16
 263 007c 0143     		orrs	r1, r0
 264              	.LVL16:
 247:Core/Src/main.c ****     				break;
 265              		.loc 1 247 8 is_stmt 1 view .LVU59
 247:Core/Src/main.c ****     				break;
 266              		.loc 1 247 16 is_stmt 0 view .LVU60
 267 007e 6218     		adds	r2, r4, r1
 247:Core/Src/main.c ****     				break;
 268              		.loc 1 247 11 view .LVU61
 269 0080 8023     		movs	r3, #128
 270 0082 DB02     		lsls	r3, r3, #11
 271 0084 9A42     		cmp	r2, r3
 272 0086 CDDD     		ble	.L12
 273              	.LVL17:
 274              	.L7:
 247:Core/Src/main.c ****     				break;
 275              		.loc 1 247 11 view .LVU62
 276              	.LBE10:
 256:Core/Src/main.c ****     		}
 257:Core/Src/main.c ****     		mandelbrot_sum += iteration;
 277              		.loc 1 257 22 view .LVU63
 278 0088 0C9E     		ldr	r6, [sp, #48]
 279 008a 4746     		mov	r7, r8
 280              		.loc 1 257 7 is_stmt 1 view .LVU64
 281              		.loc 1 257 22 is_stmt 0 view .LVU65
 282 008c 0697     		str	r7, [sp, #24]
 283 008e FB17     		asrs	r3, r7, #31
 284 0090 0793     		str	r3, [sp, #28]
 285 0092 0A9B     		ldr	r3, [sp, #40]
 286 0094 0B9C     		ldr	r4, [sp, #44]
 287 0096 0699     		ldr	r1, [sp, #24]
 288 0098 079A     		ldr	r2, [sp, #28]
 289 009a 5B18     		adds	r3, r3, r1
 290 009c 5441     		adcs	r4, r4, r2
 291 009e 0A93     		str	r3, [sp, #40]
 292 00a0 0B94     		str	r4, [sp, #44]
 293              	.LVL18:
 294              		.loc 1 257 22 view .LVU66
 295              	.LBE8:
 235:Core/Src/main.c ****     		int32_t x0 = (int32_t)(((int64_t)x * (int64_t)(3.5f * SCALE)) / width - (int64_t)(2.5f * SCAL
 296              		.loc 1 235 34 is_stmt 1 discriminator 2 view .LVU67
 297 00a2 0136     		adds	r6, r6, #1
 298              	.LVL19:
 299              	.L10:
 235:Core/Src/main.c ****     		int32_t x0 = (int32_t)(((int64_t)x * (int64_t)(3.5f * SCALE)) / width - (int64_t)(2.5f * SCAL
ARM GAS  /tmp/ccEr2V2P.s 			page 11


 300              		.loc 1 235 24 discriminator 1 view .LVU68
 301 00a4 099B     		ldr	r3, [sp, #36]
 302 00a6 9E42     		cmp	r6, r3
 303 00a8 34DA     		bge	.L13
 304              	.LBB11:
 236:Core/Src/main.c ****     		int32_t y0 = (int32_t)(((int64_t)y * (int64_t)(2.0f * SCALE)) / width - (int64_t)(1.0f * SCAL
 305              		.loc 1 236 7 view .LVU69
 236:Core/Src/main.c ****     		int32_t y0 = (int32_t)(((int64_t)y * (int64_t)(2.0f * SCALE)) / width - (int64_t)(1.0f * SCAL
 306              		.loc 1 236 31 is_stmt 0 view .LVU70
 307 00aa 0496     		str	r6, [sp, #16]
 308 00ac F317     		asrs	r3, r6, #31
 309 00ae 0593     		str	r3, [sp, #20]
 236:Core/Src/main.c ****     		int32_t y0 = (int32_t)(((int64_t)y * (int64_t)(2.0f * SCALE)) / width - (int64_t)(1.0f * SCAL
 310              		.loc 1 236 42 view .LVU71
 311 00b0 0498     		ldr	r0, [sp, #16]
 312 00b2 0599     		ldr	r1, [sp, #20]
 313 00b4 420F     		lsrs	r2, r0, #29
 314 00b6 DB00     		lsls	r3, r3, #3
 315 00b8 0393     		str	r3, [sp, #12]
 316 00ba 1343     		orrs	r3, r2
 317 00bc 0393     		str	r3, [sp, #12]
 318 00be 0300     		movs	r3, r0
 319 00c0 0C00     		movs	r4, r1
 320 00c2 C200     		lsls	r2, r0, #3
 321 00c4 0292     		str	r2, [sp, #8]
 322 00c6 0298     		ldr	r0, [sp, #8]
 323 00c8 0399     		ldr	r1, [sp, #12]
 324 00ca C01A     		subs	r0, r0, r3
 325 00cc A141     		sbcs	r1, r1, r4
 326 00ce 420C     		lsrs	r2, r0, #17
 327 00d0 CB03     		lsls	r3, r1, #15
 328 00d2 C403     		lsls	r4, r0, #15
 329 00d4 2000     		movs	r0, r4
 330 00d6 1A43     		orrs	r2, r3
 331 00d8 1100     		movs	r1, r2
 236:Core/Src/main.c ****     		int32_t y0 = (int32_t)(((int64_t)y * (int64_t)(2.0f * SCALE)) / width - (int64_t)(1.0f * SCAL
 332              		.loc 1 236 69 view .LVU72
 333 00da 099D     		ldr	r5, [sp, #36]
 334 00dc EC17     		asrs	r4, r5, #31
 335 00de 2A00     		movs	r2, r5
 336 00e0 2300     		movs	r3, r4
 337 00e2 FFF7FEFF 		bl	__aeabi_ldivmod
 338              	.LVL20:
 236:Core/Src/main.c ****     		int32_t y0 = (int32_t)(((int64_t)y * (int64_t)(2.0f * SCALE)) / width - (int64_t)(1.0f * SCAL
 339              		.loc 1 236 77 view .LVU73
 340 00e6 1449     		ldr	r1, .L15
 341 00e8 8A46     		mov	r10, r1
 342 00ea 8244     		add	r10, r10, r0
 343              	.LVL21:
 237:Core/Src/main.c **** 
 344              		.loc 1 237 7 is_stmt 1 view .LVU74
 237:Core/Src/main.c **** 
 345              		.loc 1 237 31 is_stmt 0 view .LVU75
 346 00ec 5946     		mov	r1, fp
 347 00ee C917     		asrs	r1, r1, #31
 237:Core/Src/main.c **** 
 348              		.loc 1 237 42 view .LVU76
ARM GAS  /tmp/ccEr2V2P.s 			page 12


 349 00f0 5846     		mov	r0, fp
 350 00f2 C30B     		lsrs	r3, r0, #15
 351 00f4 4904     		lsls	r1, r1, #17
 352 00f6 1943     		orrs	r1, r3
 353 00f8 4004     		lsls	r0, r0, #17
 237:Core/Src/main.c **** 
 354              		.loc 1 237 69 view .LVU77
 355 00fa 2A00     		movs	r2, r5
 356 00fc 2300     		movs	r3, r4
 357 00fe FFF7FEFF 		bl	__aeabi_ldivmod
 358              	.LVL22:
 237:Core/Src/main.c **** 
 359              		.loc 1 237 77 view .LVU78
 360 0102 0E4B     		ldr	r3, .L15+4
 361 0104 9946     		mov	r9, r3
 362 0106 8144     		add	r9, r9, r0
 363              	.LVL23:
 239:Core/Src/main.c ****     		int32_t yi = 0;
 364              		.loc 1 239 7 is_stmt 1 view .LVU79
 240:Core/Src/main.c ****     		int iteration = 0;
 365              		.loc 1 240 7 view .LVU80
 241:Core/Src/main.c **** 
 366              		.loc 1 241 7 view .LVU81
 243:Core/Src/main.c ****     			int32_t xi2 = (int32_t) (((int64_t)xi*(int64_t)xi) >> 16);
 367              		.loc 1 243 7 view .LVU82
 241:Core/Src/main.c **** 
 368              		.loc 1 241 11 is_stmt 0 view .LVU83
 369 0108 0027     		movs	r7, #0
 240:Core/Src/main.c ****     		int iteration = 0;
 370              		.loc 1 240 15 view .LVU84
 371 010a 0025     		movs	r5, #0
 239:Core/Src/main.c ****     		int32_t yi = 0;
 372              		.loc 1 239 15 view .LVU85
 373 010c 0024     		movs	r4, #0
 374 010e 0C96     		str	r6, [sp, #48]
 375 0110 B846     		mov	r8, r7
 243:Core/Src/main.c ****     			int32_t xi2 = (int32_t) (((int64_t)xi*(int64_t)xi) >> 16);
 376              		.loc 1 243 13 view .LVU86
 377 0112 9CE7     		b	.L6
 378              	.LVL24:
 379              	.L13:
 243:Core/Src/main.c ****     			int32_t xi2 = (int32_t) (((int64_t)xi*(int64_t)xi) >> 16);
 380              		.loc 1 243 13 view .LVU87
 381              	.LBE11:
 382              	.LBE7:
 234:Core/Src/main.c ****     	for (int x = 0; x < width; x++){
 383              		.loc 1 234 34 is_stmt 1 discriminator 2 view .LVU88
 384 0114 0123     		movs	r3, #1
 385 0116 9C46     		mov	ip, r3
 386 0118 E344     		add	fp, fp, ip
 387              	.LVL25:
 388              	.L5:
 234:Core/Src/main.c ****     	for (int x = 0; x < width; x++){
 389              		.loc 1 234 23 discriminator 1 view .LVU89
 390 011a 0D9B     		ldr	r3, [sp, #52]
 391 011c 9B45     		cmp	fp, r3
 392 011e 02DA     		bge	.L14
ARM GAS  /tmp/ccEr2V2P.s 			page 13


 393              	.LBB12:
 235:Core/Src/main.c ****     		int32_t x0 = (int32_t)(((int64_t)x * (int64_t)(3.5f * SCALE)) / width - (int64_t)(2.5f * SCAL
 394              		.loc 1 235 15 is_stmt 0 view .LVU90
 395 0120 0023     		movs	r3, #0
 396 0122 1E00     		movs	r6, r3
 397 0124 BEE7     		b	.L10
 398              	.L14:
 399              	.LBE12:
 400              	.LBE13:
 258:Core/Src/main.c **** 
 259:Core/Src/main.c ****     	}
 260:Core/Src/main.c ****     }
 261:Core/Src/main.c ****     
 262:Core/Src/main.c ****     return mandelbrot_sum;
 401              		.loc 1 262 5 is_stmt 1 view .LVU91
 263:Core/Src/main.c **** 
 264:Core/Src/main.c **** }
 402              		.loc 1 264 1 is_stmt 0 view .LVU92
 403 0126 0A98     		ldr	r0, [sp, #40]
 404 0128 0B99     		ldr	r1, [sp, #44]
 405 012a 0FB0     		add	sp, sp, #60
 406              		@ sp needed
 407              	.LVL26:
 408              		.loc 1 264 1 view .LVU93
 409 012c F0BC     		pop	{r4, r5, r6, r7}
 410 012e BB46     		mov	fp, r7
 411 0130 B246     		mov	r10, r6
 412 0132 A946     		mov	r9, r5
 413 0134 A046     		mov	r8, r4
 414 0136 F0BD     		pop	{r4, r5, r6, r7, pc}
 415              	.L16:
 416              		.align	2
 417              	.L15:
 418 0138 0080FDFF 		.word	-163840
 419 013c 0000FFFF 		.word	-65536
 420              		.cfi_endproc
 421              	.LFE43:
 423              		.global	__aeabi_i2d
 424              		.global	__aeabi_ddiv
 425              		.global	__aeabi_dmul
 426              		.global	__aeabi_dsub
 427              		.global	__aeabi_dadd
 428              		.global	__aeabi_dcmple
 429              		.section	.text.calculate_mandelbrot_double,"ax",%progbits
 430              		.align	1
 431              		.global	calculate_mandelbrot_double
 432              		.syntax unified
 433              		.code	16
 434              		.thumb_func
 436              	calculate_mandelbrot_double:
 437              	.LVL27:
 438              	.LFB44:
 265:Core/Src/main.c **** 
 266:Core/Src/main.c **** //TODO: Mandelbroat using variable type double
 267:Core/Src/main.c **** uint64_t calculate_mandelbrot_double(int width, int height, int max_iterations){
 439              		.loc 1 267 80 is_stmt 1 view -0
 440              		.cfi_startproc
ARM GAS  /tmp/ccEr2V2P.s 			page 14


 441              		@ args = 0, pretend = 0, frame = 64
 442              		@ frame_needed = 0, uses_anonymous_args = 0
 443              		.loc 1 267 80 is_stmt 0 view .LVU95
 444 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 445              	.LCFI5:
 446              		.cfi_def_cfa_offset 20
 447              		.cfi_offset 4, -20
 448              		.cfi_offset 5, -16
 449              		.cfi_offset 6, -12
 450              		.cfi_offset 7, -8
 451              		.cfi_offset 14, -4
 452 0002 DE46     		mov	lr, fp
 453 0004 5746     		mov	r7, r10
 454 0006 4E46     		mov	r6, r9
 455 0008 4546     		mov	r5, r8
 456 000a E0B5     		push	{r5, r6, r7, lr}
 457              	.LCFI6:
 458              		.cfi_def_cfa_offset 36
 459              		.cfi_offset 8, -36
 460              		.cfi_offset 9, -32
 461              		.cfi_offset 10, -28
 462              		.cfi_offset 11, -24
 463 000c 91B0     		sub	sp, sp, #68
 464              	.LCFI7:
 465              		.cfi_def_cfa_offset 104
 466 000e 0F91     		str	r1, [sp, #60]
 467 0010 9146     		mov	r9, r2
 268:Core/Src/main.c ****     uint64_t mandelbrot_sum = 0;
 468              		.loc 1 268 5 is_stmt 1 view .LVU96
 469              	.LVL28:
 269:Core/Src/main.c ****     //TODO: Complete the function implementation
 270:Core/Src/main.c **** 
 271:Core/Src/main.c **** 	for (int y = 0; y < height; y++){
 470              		.loc 1 271 2 view .LVU97
 471              	.LBB14:
 472              		.loc 1 271 7 view .LVU98
 473              		.loc 1 271 11 is_stmt 0 view .LVU99
 474 0012 0023     		movs	r3, #0
 475 0014 0E93     		str	r3, [sp, #56]
 476              	.LBE14:
 268:Core/Src/main.c ****     uint64_t mandelbrot_sum = 0;
 477              		.loc 1 268 14 view .LVU100
 478 0016 0023     		movs	r3, #0
 479 0018 0024     		movs	r4, #0
 480 001a 0C93     		str	r3, [sp, #48]
 481 001c 0D94     		str	r4, [sp, #52]
 482 001e 0B90     		str	r0, [sp, #44]
 483              	.LBB20:
 484              		.loc 1 271 2 view .LVU101
 485 0020 8BE0     		b	.L18
 486              	.LVL29:
 487              	.L21:
 488              	.LBB15:
 489              	.LBB16:
 490              	.LBB17:
 272:Core/Src/main.c **** 
 273:Core/Src/main.c **** 		for (int x = 0; x < width; x++){
ARM GAS  /tmp/ccEr2V2P.s 			page 15


 274:Core/Src/main.c **** 
 275:Core/Src/main.c **** 			double x0 = (((double)x)/(width)) * 3.5 - 2.5;
 276:Core/Src/main.c **** 			double y0 = (((double)y)/(height)) * 2.0 - 1.0;
 277:Core/Src/main.c **** 
 278:Core/Src/main.c **** 
 279:Core/Src/main.c **** 			double xi = 0.0;
 280:Core/Src/main.c **** 			double yi = 0.0;
 281:Core/Src/main.c **** 			int iteration = 0;
 282:Core/Src/main.c **** 
 283:Core/Src/main.c **** 			while ( (iteration < max_iterations) && ((xi*xi + yi*yi) <= 4.0) ) {
 284:Core/Src/main.c **** 				double temp = (xi*xi) - (yi*yi) + x0;
 491              		.loc 1 284 5 is_stmt 1 view .LVU102
 492              		.loc 1 284 27 is_stmt 0 view .LVU103
 493 0022 029A     		ldr	r2, [sp, #8]
 494 0024 039B     		ldr	r3, [sp, #12]
 495 0026 0098     		ldr	r0, [sp]
 496 0028 0199     		ldr	r1, [sp, #4]
 497 002a FFF7FEFF 		bl	__aeabi_dsub
 498              	.LVL30:
 499              		.loc 1 284 12 view .LVU104
 500 002e 049A     		ldr	r2, [sp, #16]
 501 0030 059B     		ldr	r3, [sp, #20]
 502 0032 FFF7FEFF 		bl	__aeabi_dadd
 503              	.LVL31:
 504 0036 0090     		str	r0, [sp]
 505 0038 0191     		str	r1, [sp, #4]
 506              	.LVL32:
 285:Core/Src/main.c **** 				yi = (2 * xi * yi) + y0;
 507              		.loc 1 285 5 is_stmt 1 view .LVU105
 508              		.loc 1 285 13 is_stmt 0 view .LVU106
 509 003a 2200     		movs	r2, r4
 510 003c 2B00     		movs	r3, r5
 511 003e 2000     		movs	r0, r4
 512              	.LVL33:
 513              		.loc 1 285 13 view .LVU107
 514 0040 2900     		movs	r1, r5
 515 0042 FFF7FEFF 		bl	__aeabi_dadd
 516              	.LVL34:
 517              		.loc 1 285 18 view .LVU108
 518 0046 3200     		movs	r2, r6
 519 0048 3B00     		movs	r3, r7
 520 004a FFF7FEFF 		bl	__aeabi_dmul
 521              	.LVL35:
 522              		.loc 1 285 8 view .LVU109
 523 004e 069A     		ldr	r2, [sp, #24]
 524 0050 079B     		ldr	r3, [sp, #28]
 525 0052 FFF7FEFF 		bl	__aeabi_dadd
 526              	.LVL36:
 527 0056 0600     		movs	r6, r0
 528              	.LVL37:
 529              		.loc 1 285 8 view .LVU110
 530 0058 0F00     		movs	r7, r1
 531              	.LVL38:
 286:Core/Src/main.c **** 				xi = temp;
 532              		.loc 1 286 5 is_stmt 1 view .LVU111
 287:Core/Src/main.c **** 				iteration += 1;
 533              		.loc 1 287 5 view .LVU112
ARM GAS  /tmp/ccEr2V2P.s 			page 16


 534              		.loc 1 287 15 is_stmt 0 view .LVU113
 535 005a 0123     		movs	r3, #1
 536 005c 9C46     		mov	ip, r3
 537 005e E044     		add	r8, r8, ip
 538              	.LVL39:
 286:Core/Src/main.c **** 				xi = temp;
 539              		.loc 1 286 8 view .LVU114
 540 0060 009C     		ldr	r4, [sp]
 541 0062 019D     		ldr	r5, [sp, #4]
 542              	.LVL40:
 543              	.L19:
 286:Core/Src/main.c **** 				xi = temp;
 544              		.loc 1 286 8 view .LVU115
 545              	.LBE17:
 283:Core/Src/main.c **** 				double temp = (xi*xi) - (yi*yi) + x0;
 546              		.loc 1 283 41 is_stmt 1 view .LVU116
 547 0064 C845     		cmp	r8, r9
 548 0066 1BDA     		bge	.L20
 283:Core/Src/main.c **** 				double temp = (xi*xi) - (yi*yi) + x0;
 549              		.loc 1 283 48 is_stmt 0 discriminator 1 view .LVU117
 550 0068 2200     		movs	r2, r4
 551 006a 2B00     		movs	r3, r5
 552 006c 2000     		movs	r0, r4
 553 006e 2900     		movs	r1, r5
 554 0070 FFF7FEFF 		bl	__aeabi_dmul
 555              	.LVL41:
 556 0074 0090     		str	r0, [sp]
 557 0076 0191     		str	r1, [sp, #4]
 283:Core/Src/main.c **** 				double temp = (xi*xi) - (yi*yi) + x0;
 558              		.loc 1 283 56 discriminator 1 view .LVU118
 559 0078 3200     		movs	r2, r6
 560 007a 3B00     		movs	r3, r7
 561 007c 3000     		movs	r0, r6
 562 007e 3900     		movs	r1, r7
 563 0080 FFF7FEFF 		bl	__aeabi_dmul
 564              	.LVL42:
 565 0084 0200     		movs	r2, r0
 566 0086 0B00     		movs	r3, r1
 567 0088 0292     		str	r2, [sp, #8]
 568 008a 0393     		str	r3, [sp, #12]
 283:Core/Src/main.c **** 				double temp = (xi*xi) - (yi*yi) + x0;
 569              		.loc 1 283 52 discriminator 1 view .LVU119
 570 008c 0098     		ldr	r0, [sp]
 571 008e 0199     		ldr	r1, [sp, #4]
 572 0090 FFF7FEFF 		bl	__aeabi_dadd
 573              	.LVL43:
 283:Core/Src/main.c **** 				double temp = (xi*xi) - (yi*yi) + x0;
 574              		.loc 1 283 41 discriminator 1 view .LVU120
 575 0094 0022     		movs	r2, #0
 576 0096 344B     		ldr	r3, .L27
 577 0098 FFF7FEFF 		bl	__aeabi_dcmple
 578              	.LVL44:
 579 009c 0028     		cmp	r0, #0
 580 009e C0D1     		bne	.L21
 581              	.L20:
 288:Core/Src/main.c **** 			}
 289:Core/Src/main.c **** 
ARM GAS  /tmp/ccEr2V2P.s 			page 17


 290:Core/Src/main.c **** 			mandelbrot_sum += iteration;
 582              		.loc 1 290 4 is_stmt 1 view .LVU121
 583              		.loc 1 290 19 is_stmt 0 view .LVU122
 584 00a0 4346     		mov	r3, r8
 585 00a2 0893     		str	r3, [sp, #32]
 586 00a4 DB17     		asrs	r3, r3, #31
 587 00a6 0993     		str	r3, [sp, #36]
 588 00a8 0C9B     		ldr	r3, [sp, #48]
 589 00aa 0D9C     		ldr	r4, [sp, #52]
 590 00ac 0899     		ldr	r1, [sp, #32]
 591 00ae 099A     		ldr	r2, [sp, #36]
 592 00b0 5B18     		adds	r3, r3, r1
 593 00b2 5441     		adcs	r4, r4, r2
 594 00b4 0C93     		str	r3, [sp, #48]
 595 00b6 0D94     		str	r4, [sp, #52]
 596              	.LVL45:
 597              		.loc 1 290 19 view .LVU123
 598              	.LBE16:
 273:Core/Src/main.c **** 
 599              		.loc 1 273 31 is_stmt 1 discriminator 2 view .LVU124
 600 00b8 0A9B     		ldr	r3, [sp, #40]
 601              	.LVL46:
 273:Core/Src/main.c **** 
 602              		.loc 1 273 31 is_stmt 0 discriminator 2 view .LVU125
 603 00ba 0133     		adds	r3, r3, #1
 604 00bc 0A93     		str	r3, [sp, #40]
 605              	.LVL47:
 606              	.L23:
 273:Core/Src/main.c **** 
 607              		.loc 1 273 21 is_stmt 1 discriminator 1 view .LVU126
 608 00be 0A9B     		ldr	r3, [sp, #40]
 609 00c0 0B9A     		ldr	r2, [sp, #44]
 610 00c2 9342     		cmp	r3, r2
 611 00c4 36DA     		bge	.L25
 612              	.LBB18:
 275:Core/Src/main.c **** 			double y0 = (((double)y)/(height)) * 2.0 - 1.0;
 613              		.loc 1 275 4 view .LVU127
 275:Core/Src/main.c **** 			double y0 = (((double)y)/(height)) * 2.0 - 1.0;
 614              		.loc 1 275 18 is_stmt 0 view .LVU128
 615 00c6 0A98     		ldr	r0, [sp, #40]
 616 00c8 FFF7FEFF 		bl	__aeabi_i2d
 617              	.LVL48:
 618 00cc 0400     		movs	r4, r0
 619 00ce 0D00     		movs	r5, r1
 275:Core/Src/main.c **** 			double y0 = (((double)y)/(height)) * 2.0 - 1.0;
 620              		.loc 1 275 28 view .LVU129
 621 00d0 0B98     		ldr	r0, [sp, #44]
 622 00d2 FFF7FEFF 		bl	__aeabi_i2d
 623              	.LVL49:
 624 00d6 0200     		movs	r2, r0
 625 00d8 0B00     		movs	r3, r1
 626 00da 2000     		movs	r0, r4
 627 00dc 2900     		movs	r1, r5
 628 00de FFF7FEFF 		bl	__aeabi_ddiv
 629              	.LVL50:
 275:Core/Src/main.c **** 			double y0 = (((double)y)/(height)) * 2.0 - 1.0;
 630              		.loc 1 275 38 view .LVU130
ARM GAS  /tmp/ccEr2V2P.s 			page 18


 631 00e2 0022     		movs	r2, #0
 632 00e4 214B     		ldr	r3, .L27+4
 633 00e6 FFF7FEFF 		bl	__aeabi_dmul
 634              	.LVL51:
 275:Core/Src/main.c **** 			double y0 = (((double)y)/(height)) * 2.0 - 1.0;
 635              		.loc 1 275 11 view .LVU131
 636 00ea 0022     		movs	r2, #0
 637 00ec 204B     		ldr	r3, .L27+8
 638 00ee FFF7FEFF 		bl	__aeabi_dsub
 639              	.LVL52:
 640 00f2 0490     		str	r0, [sp, #16]
 641 00f4 0591     		str	r1, [sp, #20]
 642              	.LVL53:
 276:Core/Src/main.c **** 
 643              		.loc 1 276 4 is_stmt 1 view .LVU132
 276:Core/Src/main.c **** 
 644              		.loc 1 276 18 is_stmt 0 view .LVU133
 645 00f6 5846     		mov	r0, fp
 646              	.LVL54:
 276:Core/Src/main.c **** 
 647              		.loc 1 276 18 view .LVU134
 648 00f8 FFF7FEFF 		bl	__aeabi_i2d
 649              	.LVL55:
 650 00fc 0400     		movs	r4, r0
 651 00fe 0D00     		movs	r5, r1
 276:Core/Src/main.c **** 
 652              		.loc 1 276 28 view .LVU135
 653 0100 5046     		mov	r0, r10
 654 0102 FFF7FEFF 		bl	__aeabi_i2d
 655              	.LVL56:
 656 0106 0200     		movs	r2, r0
 657 0108 0B00     		movs	r3, r1
 658 010a 2000     		movs	r0, r4
 659 010c 2900     		movs	r1, r5
 660 010e FFF7FEFF 		bl	__aeabi_ddiv
 661              	.LVL57:
 276:Core/Src/main.c **** 
 662              		.loc 1 276 39 view .LVU136
 663 0112 0200     		movs	r2, r0
 664 0114 0B00     		movs	r3, r1
 665 0116 FFF7FEFF 		bl	__aeabi_dadd
 666              	.LVL58:
 276:Core/Src/main.c **** 
 667              		.loc 1 276 11 view .LVU137
 668 011a 0022     		movs	r2, #0
 669 011c 154B     		ldr	r3, .L27+12
 670 011e FFF7FEFF 		bl	__aeabi_dsub
 671              	.LVL59:
 672 0122 0690     		str	r0, [sp, #24]
 673 0124 0791     		str	r1, [sp, #28]
 674              	.LVL60:
 279:Core/Src/main.c **** 			double yi = 0.0;
 675              		.loc 1 279 4 is_stmt 1 view .LVU138
 280:Core/Src/main.c **** 			int iteration = 0;
 676              		.loc 1 280 4 view .LVU139
 281:Core/Src/main.c **** 
 677              		.loc 1 281 4 view .LVU140
ARM GAS  /tmp/ccEr2V2P.s 			page 19


 283:Core/Src/main.c **** 				double temp = (xi*xi) - (yi*yi) + x0;
 678              		.loc 1 283 4 view .LVU141
 281:Core/Src/main.c **** 
 679              		.loc 1 281 8 is_stmt 0 view .LVU142
 680 0126 0023     		movs	r3, #0
 681 0128 9846     		mov	r8, r3
 280:Core/Src/main.c **** 			int iteration = 0;
 682              		.loc 1 280 11 view .LVU143
 683 012a 0026     		movs	r6, #0
 684 012c 0027     		movs	r7, #0
 279:Core/Src/main.c **** 			double yi = 0.0;
 685              		.loc 1 279 11 view .LVU144
 686 012e 3400     		movs	r4, r6
 687 0130 3D00     		movs	r5, r7
 283:Core/Src/main.c **** 				double temp = (xi*xi) - (yi*yi) + x0;
 688              		.loc 1 283 10 view .LVU145
 689 0132 97E7     		b	.L19
 690              	.LVL61:
 691              	.L25:
 283:Core/Src/main.c **** 				double temp = (xi*xi) - (yi*yi) + x0;
 692              		.loc 1 283 10 view .LVU146
 693              	.LBE18:
 694              	.LBE15:
 271:Core/Src/main.c **** 
 695              		.loc 1 271 31 is_stmt 1 discriminator 2 view .LVU147
 696 0134 0E9B     		ldr	r3, [sp, #56]
 697              	.LVL62:
 271:Core/Src/main.c **** 
 698              		.loc 1 271 31 is_stmt 0 discriminator 2 view .LVU148
 699 0136 0133     		adds	r3, r3, #1
 700 0138 0E93     		str	r3, [sp, #56]
 701              	.LVL63:
 702              	.L18:
 271:Core/Src/main.c **** 
 703              		.loc 1 271 20 is_stmt 1 discriminator 1 view .LVU149
 704 013a 0E9B     		ldr	r3, [sp, #56]
 705 013c 0F9A     		ldr	r2, [sp, #60]
 706 013e 9342     		cmp	r3, r2
 707 0140 08DA     		bge	.L26
 708              	.LBB19:
 273:Core/Src/main.c **** 
 709              		.loc 1 273 12 is_stmt 0 view .LVU150
 710 0142 0023     		movs	r3, #0
 711 0144 9A46     		mov	r10, r3
 712 0146 0E9B     		ldr	r3, [sp, #56]
 713 0148 9B46     		mov	fp, r3
 714 014a 5346     		mov	r3, r10
 715 014c 0A93     		str	r3, [sp, #40]
 716 014e 0F9B     		ldr	r3, [sp, #60]
 717 0150 9A46     		mov	r10, r3
 718 0152 B4E7     		b	.L23
 719              	.LVL64:
 720              	.L26:
 273:Core/Src/main.c **** 
 721              		.loc 1 273 12 view .LVU151
 722              	.LBE19:
 723              	.LBE20:
ARM GAS  /tmp/ccEr2V2P.s 			page 20


 291:Core/Src/main.c **** 
 292:Core/Src/main.c **** 		}
 293:Core/Src/main.c **** 	}
 294:Core/Src/main.c **** 
 295:Core/Src/main.c **** 	return mandelbrot_sum;
 724              		.loc 1 295 2 is_stmt 1 view .LVU152
 296:Core/Src/main.c **** }
 725              		.loc 1 296 1 is_stmt 0 view .LVU153
 726 0154 0C98     		ldr	r0, [sp, #48]
 727 0156 0D99     		ldr	r1, [sp, #52]
 728 0158 11B0     		add	sp, sp, #68
 729              		@ sp needed
 730              	.LVL65:
 731              		.loc 1 296 1 view .LVU154
 732 015a F0BC     		pop	{r4, r5, r6, r7}
 733 015c BB46     		mov	fp, r7
 734 015e B246     		mov	r10, r6
 735 0160 A946     		mov	r9, r5
 736 0162 A046     		mov	r8, r4
 737 0164 F0BD     		pop	{r4, r5, r6, r7, pc}
 738              	.L28:
 739 0166 C046     		.align	2
 740              	.L27:
 741 0168 00001040 		.word	1074790400
 742 016c 00000C40 		.word	1074528256
 743 0170 00000440 		.word	1074003968
 744 0174 0000F03F 		.word	1072693248
 745              		.cfi_endproc
 746              	.LFE44:
 748              		.section	.text.Error_Handler,"ax",%progbits
 749              		.align	1
 750              		.global	Error_Handler
 751              		.syntax unified
 752              		.code	16
 753              		.thumb_func
 755              	Error_Handler:
 756              	.LFB45:
 297:Core/Src/main.c **** 
 298:Core/Src/main.c **** /* USER CODE END 4 */
 299:Core/Src/main.c **** 
 300:Core/Src/main.c **** /**
 301:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 302:Core/Src/main.c ****   * @retval None
 303:Core/Src/main.c ****   */
 304:Core/Src/main.c **** void Error_Handler(void)
 305:Core/Src/main.c **** {
 757              		.loc 1 305 1 is_stmt 1 view -0
 758              		.cfi_startproc
 759              		@ Volatile: function does not return.
 760              		@ args = 0, pretend = 0, frame = 0
 761              		@ frame_needed = 0, uses_anonymous_args = 0
 762              		@ link register save eliminated.
 306:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 307:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 308:Core/Src/main.c ****   __disable_irq();
 763              		.loc 1 308 3 view .LVU156
 764              	.LBB21:
ARM GAS  /tmp/ccEr2V2P.s 			page 21


 765              	.LBI21:
 766              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
ARM GAS  /tmp/ccEr2V2P.s 			page 22


  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccEr2V2P.s 			page 23


 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 767              		.loc 2 140 27 view .LVU157
 768              	.LBB22:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 769              		.loc 2 142 3 view .LVU158
 770              		.syntax divided
 771              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 772 0000 72B6     		cpsid i
 773              	@ 0 "" 2
 774              		.thumb
 775              		.syntax unified
 776              	.L30:
 777              	.LBE22:
 778              	.LBE21:
 309:Core/Src/main.c ****   while (1)
 779              		.loc 1 309 3 view .LVU159
 310:Core/Src/main.c ****   {
 311:Core/Src/main.c ****   }
 780              		.loc 1 311 3 view .LVU160
 309:Core/Src/main.c ****   while (1)
 781              		.loc 1 309 9 view .LVU161
 782 0002 FEE7     		b	.L30
 783              		.cfi_endproc
 784              	.LFE45:
 786              		.section	.text.SystemClock_Config,"ax",%progbits
 787              		.align	1
 788              		.global	SystemClock_Config
 789              		.syntax unified
 790              		.code	16
ARM GAS  /tmp/ccEr2V2P.s 			page 24


 791              		.thumb_func
 793              	SystemClock_Config:
 794              	.LFB41:
 166:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 795              		.loc 1 166 1 view -0
 796              		.cfi_startproc
 797              		@ args = 0, pretend = 0, frame = 64
 798              		@ frame_needed = 0, uses_anonymous_args = 0
 799 0000 00B5     		push	{lr}
 800              	.LCFI8:
 801              		.cfi_def_cfa_offset 4
 802              		.cfi_offset 14, -4
 803 0002 91B0     		sub	sp, sp, #68
 804              	.LCFI9:
 805              		.cfi_def_cfa_offset 72
 167:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 806              		.loc 1 167 3 view .LVU163
 167:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 807              		.loc 1 167 22 is_stmt 0 view .LVU164
 808 0004 3022     		movs	r2, #48
 809 0006 0021     		movs	r1, #0
 810 0008 04A8     		add	r0, sp, #16
 811 000a FFF7FEFF 		bl	memset
 812              	.LVL66:
 168:Core/Src/main.c **** 
 813              		.loc 1 168 3 is_stmt 1 view .LVU165
 168:Core/Src/main.c **** 
 814              		.loc 1 168 22 is_stmt 0 view .LVU166
 815 000e 1022     		movs	r2, #16
 816 0010 0021     		movs	r1, #0
 817 0012 6846     		mov	r0, sp
 818 0014 FFF7FEFF 		bl	memset
 819              	.LVL67:
 173:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 820              		.loc 1 173 3 is_stmt 1 view .LVU167
 173:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 821              		.loc 1 173 36 is_stmt 0 view .LVU168
 822 0018 0223     		movs	r3, #2
 823 001a 0493     		str	r3, [sp, #16]
 174:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 824              		.loc 1 174 3 is_stmt 1 view .LVU169
 174:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 825              		.loc 1 174 30 is_stmt 0 view .LVU170
 826 001c 013B     		subs	r3, r3, #1
 827 001e 0793     		str	r3, [sp, #28]
 175:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 828              		.loc 1 175 3 is_stmt 1 view .LVU171
 175:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 829              		.loc 1 175 41 is_stmt 0 view .LVU172
 830 0020 0F33     		adds	r3, r3, #15
 831 0022 0893     		str	r3, [sp, #32]
 176:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 832              		.loc 1 176 3 is_stmt 1 view .LVU173
 177:Core/Src/main.c ****   {
 833              		.loc 1 177 3 view .LVU174
 177:Core/Src/main.c ****   {
 834              		.loc 1 177 7 is_stmt 0 view .LVU175
ARM GAS  /tmp/ccEr2V2P.s 			page 25


 835 0024 04A8     		add	r0, sp, #16
 836 0026 FFF7FEFF 		bl	HAL_RCC_OscConfig
 837              	.LVL68:
 177:Core/Src/main.c ****   {
 838              		.loc 1 177 6 discriminator 1 view .LVU176
 839 002a 0028     		cmp	r0, #0
 840 002c 0DD1     		bne	.L34
 184:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 841              		.loc 1 184 3 is_stmt 1 view .LVU177
 184:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 842              		.loc 1 184 31 is_stmt 0 view .LVU178
 843 002e 0723     		movs	r3, #7
 844 0030 0093     		str	r3, [sp]
 186:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 845              		.loc 1 186 3 is_stmt 1 view .LVU179
 186:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 846              		.loc 1 186 34 is_stmt 0 view .LVU180
 847 0032 0023     		movs	r3, #0
 848 0034 0193     		str	r3, [sp, #4]
 187:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 849              		.loc 1 187 3 is_stmt 1 view .LVU181
 187:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 850              		.loc 1 187 35 is_stmt 0 view .LVU182
 851 0036 0293     		str	r3, [sp, #8]
 188:Core/Src/main.c **** 
 852              		.loc 1 188 3 is_stmt 1 view .LVU183
 188:Core/Src/main.c **** 
 853              		.loc 1 188 36 is_stmt 0 view .LVU184
 854 0038 0393     		str	r3, [sp, #12]
 190:Core/Src/main.c ****   {
 855              		.loc 1 190 3 is_stmt 1 view .LVU185
 190:Core/Src/main.c ****   {
 856              		.loc 1 190 7 is_stmt 0 view .LVU186
 857 003a 0021     		movs	r1, #0
 858 003c 6846     		mov	r0, sp
 859 003e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 860              	.LVL69:
 190:Core/Src/main.c ****   {
 861              		.loc 1 190 6 discriminator 1 view .LVU187
 862 0042 0028     		cmp	r0, #0
 863 0044 03D1     		bne	.L35
 194:Core/Src/main.c **** 
 864              		.loc 1 194 1 view .LVU188
 865 0046 11B0     		add	sp, sp, #68
 866              		@ sp needed
 867 0048 00BD     		pop	{pc}
 868              	.L34:
 179:Core/Src/main.c ****   }
 869              		.loc 1 179 5 is_stmt 1 view .LVU189
 870 004a FFF7FEFF 		bl	Error_Handler
 871              	.LVL70:
 872              	.L35:
 192:Core/Src/main.c ****   }
 873              		.loc 1 192 5 view .LVU190
 874 004e FFF7FEFF 		bl	Error_Handler
 875              	.LVL71:
 876              		.cfi_endproc
ARM GAS  /tmp/ccEr2V2P.s 			page 26


 877              	.LFE41:
 879              		.section	.text.main,"ax",%progbits
 880              		.align	1
 881              		.global	main
 882              		.syntax unified
 883              		.code	16
 884              		.thumb_func
 886              	main:
 887              	.LFB40:
  83:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 888              		.loc 1 83 1 view -0
 889              		.cfi_startproc
 890              		@ args = 0, pretend = 0, frame = 0
 891              		@ frame_needed = 0, uses_anonymous_args = 0
 892 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 893              	.LCFI10:
 894              		.cfi_def_cfa_offset 20
 895              		.cfi_offset 4, -20
 896              		.cfi_offset 5, -16
 897              		.cfi_offset 6, -12
 898              		.cfi_offset 7, -8
 899              		.cfi_offset 14, -4
 900 0002 C646     		mov	lr, r8
 901 0004 00B5     		push	{lr}
 902              	.LCFI11:
 903              		.cfi_def_cfa_offset 24
 904              		.cfi_offset 8, -24
  91:Core/Src/main.c **** 
 905              		.loc 1 91 3 view .LVU192
 906 0006 FFF7FEFF 		bl	HAL_Init
 907              	.LVL72:
  98:Core/Src/main.c **** 
 908              		.loc 1 98 3 view .LVU193
 909 000a FFF7FEFF 		bl	SystemClock_Config
 910              	.LVL73:
 105:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 911              		.loc 1 105 3 view .LVU194
 912 000e FFF7FEFF 		bl	MX_GPIO_Init
 913              	.LVL74:
 108:Core/Src/main.c ****   
 914              		.loc 1 108 3 view .LVU195
 915 0012 0122     		movs	r2, #1
 916 0014 0121     		movs	r1, #1
 917 0016 2248     		ldr	r0, .L40
 918 0018 FFF7FEFF 		bl	HAL_GPIO_WritePin
 919              	.LVL75:
 110:Core/Src/main.c **** 
 920              		.loc 1 110 3 view .LVU196
 921              	.LBB23:
 110:Core/Src/main.c **** 
 922              		.loc 1 110 8 view .LVU197
 110:Core/Src/main.c **** 
 923              		.loc 1 110 12 is_stmt 0 view .LVU198
 924 001c 0024     		movs	r4, #0
 110:Core/Src/main.c **** 
 925              		.loc 1 110 3 view .LVU199
 926 001e 32E0     		b	.L37
ARM GAS  /tmp/ccEr2V2P.s 			page 27


 927              	.LVL76:
 928              	.L38:
 929              	.LBB24:
 112:Core/Src/main.c **** 	  int height = image_sizes[i];
 930              		.loc 1 112 4 is_stmt 1 view .LVU200
 112:Core/Src/main.c **** 	  int height = image_sizes[i];
 931              		.loc 1 112 8 is_stmt 0 view .LVU201
 932 0020 204B     		ldr	r3, .L40+4
 933 0022 A200     		lsls	r2, r4, #2
 934 0024 D558     		ldr	r5, [r2, r3]
 935              	.LVL77:
 113:Core/Src/main.c **** 
 936              		.loc 1 113 4 is_stmt 1 view .LVU202
 116:Core/Src/main.c **** 
 937              		.loc 1 116 4 view .LVU203
 116:Core/Src/main.c **** 
 938              		.loc 1 116 17 is_stmt 0 view .LVU204
 939 0026 FFF7FEFF 		bl	HAL_GetTick
 940              	.LVL78:
 116:Core/Src/main.c **** 
 941              		.loc 1 116 15 discriminator 1 view .LVU205
 942 002a 1F4E     		ldr	r6, .L40+8
 943 002c 3060     		str	r0, [r6]
 120:Core/Src/main.c **** 	  //uint64_t checksum = calculate_mandelbrot_fixed_point_arithmetic(width, height, MAX_ITER);
 944              		.loc 1 120 4 is_stmt 1 view .LVU206
 120:Core/Src/main.c **** 	  //uint64_t checksum = calculate_mandelbrot_fixed_point_arithmetic(width, height, MAX_ITER);
 945              		.loc 1 120 24 is_stmt 0 view .LVU207
 946 002e 6422     		movs	r2, #100
 947 0030 2900     		movs	r1, r5
 948 0032 2800     		movs	r0, r5
 949 0034 FFF7FEFF 		bl	calculate_mandelbrot_double
 950              	.LVL79:
 951 0038 8046     		mov	r8, r0
 952 003a 0D00     		movs	r5, r1
 953              	.LVL80:
 124:Core/Src/main.c **** 
 954              		.loc 1 124 4 is_stmt 1 view .LVU208
 124:Core/Src/main.c **** 
 955              		.loc 1 124 15 is_stmt 0 view .LVU209
 956 003c FFF7FEFF 		bl	HAL_GetTick
 957              	.LVL81:
 124:Core/Src/main.c **** 
 958              		.loc 1 124 13 discriminator 1 view .LVU210
 959 0040 1A4B     		ldr	r3, .L40+12
 960 0042 1860     		str	r0, [r3]
 126:Core/Src/main.c **** 	  checksums[completed_executions] = checksum;
 961              		.loc 1 126 4 is_stmt 1 view .LVU211
 126:Core/Src/main.c **** 	  checksums[completed_executions] = checksum;
 962              		.loc 1 126 14 is_stmt 0 view .LVU212
 963 0044 1A4F     		ldr	r7, .L40+16
 964 0046 3968     		ldr	r1, [r7]
 126:Core/Src/main.c **** 	  checksums[completed_executions] = checksum;
 965              		.loc 1 126 48 view .LVU213
 966 0048 3268     		ldr	r2, [r6]
 967 004a 821A     		subs	r2, r0, r2
 126:Core/Src/main.c **** 	  checksums[completed_executions] = checksum;
 968              		.loc 1 126 37 view .LVU214
ARM GAS  /tmp/ccEr2V2P.s 			page 28


 969 004c 194B     		ldr	r3, .L40+20
 970 004e C800     		lsls	r0, r1, #3
 971 0050 1B18     		adds	r3, r3, r0
 972 0052 1A60     		str	r2, [r3]
 973 0054 0022     		movs	r2, #0
 974 0056 5A60     		str	r2, [r3, #4]
 127:Core/Src/main.c **** 	  completed_executions++;
 975              		.loc 1 127 4 is_stmt 1 view .LVU215
 127:Core/Src/main.c **** 	  completed_executions++;
 976              		.loc 1 127 36 is_stmt 0 view .LVU216
 977 0058 174B     		ldr	r3, .L40+24
 978 005a 1B18     		adds	r3, r3, r0
 979 005c 4246     		mov	r2, r8
 980 005e 1A60     		str	r2, [r3]
 981 0060 5D60     		str	r5, [r3, #4]
 128:Core/Src/main.c **** 
 982              		.loc 1 128 4 is_stmt 1 view .LVU217
 128:Core/Src/main.c **** 
 983              		.loc 1 128 24 is_stmt 0 view .LVU218
 984 0062 0131     		adds	r1, r1, #1
 985 0064 3960     		str	r1, [r7]
 134:Core/Src/main.c **** 
 986              		.loc 1 134 4 is_stmt 1 view .LVU219
 987 0066 0E4D     		ldr	r5, .L40
 988              	.LVL82:
 134:Core/Src/main.c **** 
 989              		.loc 1 134 4 is_stmt 0 view .LVU220
 990 0068 0122     		movs	r2, #1
 991 006a 0221     		movs	r1, #2
 992 006c 2800     		movs	r0, r5
 993 006e FFF7FEFF 		bl	HAL_GPIO_WritePin
 994              	.LVL83:
 137:Core/Src/main.c **** 
 995              		.loc 1 137 4 is_stmt 1 view .LVU221
 996 0072 FA20     		movs	r0, #250
 997 0074 8000     		lsls	r0, r0, #2
 998 0076 FFF7FEFF 		bl	HAL_Delay
 999              	.LVL84:
 140:Core/Src/main.c ****   
 1000              		.loc 1 140 4 view .LVU222
 1001 007a 0022     		movs	r2, #0
 1002 007c 0221     		movs	r1, #2
 1003 007e 2800     		movs	r0, r5
 1004 0080 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1005              	.LVL85:
 1006              	.LBE24:
 110:Core/Src/main.c **** 
 1007              		.loc 1 110 45 discriminator 3 view .LVU223
 1008 0084 0134     		adds	r4, r4, #1
 1009              	.LVL86:
 1010              	.L37:
 110:Core/Src/main.c **** 
 1011              		.loc 1 110 21 discriminator 1 view .LVU224
 1012 0086 132C     		cmp	r4, #19
 1013 0088 CAD9     		bls	.L38
 1014              	.LBE23:
 145:Core/Src/main.c ****   
ARM GAS  /tmp/ccEr2V2P.s 			page 29


 1015              		.loc 1 145 3 view .LVU225
 1016 008a 0022     		movs	r2, #0
 1017 008c 0121     		movs	r1, #1
 1018 008e 0448     		ldr	r0, .L40
 1019 0090 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1020              	.LVL87:
 1021              	.L39:
 152:Core/Src/main.c ****   {
 1022              		.loc 1 152 3 view .LVU226
 155:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 1023              		.loc 1 155 4 discriminator 1 view .LVU227
 1024 0094 0022     		movs	r2, #0
 1025 0096 0121     		movs	r1, #1
 1026 0098 0148     		ldr	r0, .L40
 1027 009a FFF7FEFF 		bl	HAL_GPIO_WritePin
 1028              	.LVL88:
 152:Core/Src/main.c ****   {
 1029              		.loc 1 152 9 view .LVU228
 1030 009e F9E7     		b	.L39
 1031              	.L41:
 1032              		.align	2
 1033              	.L40:
 1034 00a0 00040048 		.word	1207960576
 1035 00a4 00000000 		.word	image_sizes
 1036 00a8 00000000 		.word	start_time
 1037 00ac 00000000 		.word	end_time
 1038 00b0 00000000 		.word	completed_executions
 1039 00b4 00000000 		.word	executions
 1040 00b8 00000000 		.word	checksums
 1041              		.cfi_endproc
 1042              	.LFE40:
 1044              		.global	end_time
 1045              		.section	.bss.end_time,"aw",%nobits
 1046              		.align	2
 1049              	end_time:
 1050 0000 00000000 		.space	4
 1051              		.global	start_time
 1052              		.section	.bss.start_time,"aw",%nobits
 1053              		.align	2
 1056              	start_time:
 1057 0000 00000000 		.space	4
 1058              		.global	completed_executions
 1059              		.section	.bss.completed_executions,"aw",%nobits
 1060              		.align	2
 1063              	completed_executions:
 1064 0000 00000000 		.space	4
 1065              		.global	checksums
 1066              		.section	.bss.checksums,"aw",%nobits
 1067              		.align	3
 1070              	checksums:
 1071 0000 00000000 		.space	40
 1071      00000000 
 1071      00000000 
 1071      00000000 
 1071      00000000 
 1072              		.global	executions
 1073              		.section	.bss.executions,"aw",%nobits
ARM GAS  /tmp/ccEr2V2P.s 			page 30


 1074              		.align	3
 1077              	executions:
 1078 0000 00000000 		.space	40
 1078      00000000 
 1078      00000000 
 1078      00000000 
 1078      00000000 
 1079              		.global	image_sizes
 1080              		.section	.data.image_sizes,"aw"
 1081              		.align	2
 1084              	image_sizes:
 1085 0000 80000000 		.word	128
 1086 0004 A0000000 		.word	160
 1087 0008 C0000000 		.word	192
 1088 000c E0000000 		.word	224
 1089 0010 00010000 		.word	256
 1090              		.text
 1091              	.Letext0:
 1092              		.file 3 "/opt/st/stm32cubeide_1.19.0_2/plugins/com.st.stm32cube.ide.mcu.externaltools.gnu-tools-fo
 1093              		.file 4 "/opt/st/stm32cubeide_1.19.0_2/plugins/com.st.stm32cube.ide.mcu.externaltools.gnu-tools-fo
 1094              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f051x8.h"
 1095              		.file 6 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 1096              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 1097              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 1098              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 1099              		.file 10 "<built-in>"
ARM GAS  /tmp/ccEr2V2P.s 			page 31


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccEr2V2P.s:19     .text.MX_GPIO_Init:00000000 $t
     /tmp/ccEr2V2P.s:24     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/ccEr2V2P.s:114    .text.MX_GPIO_Init:0000005c $d
     /tmp/ccEr2V2P.s:122    .text.calculate_mandelbrot_fixed_point_arithmetic:00000000 $t
     /tmp/ccEr2V2P.s:128    .text.calculate_mandelbrot_fixed_point_arithmetic:00000000 calculate_mandelbrot_fixed_point_arithmetic
     /tmp/ccEr2V2P.s:418    .text.calculate_mandelbrot_fixed_point_arithmetic:00000138 $d
     /tmp/ccEr2V2P.s:430    .text.calculate_mandelbrot_double:00000000 $t
     /tmp/ccEr2V2P.s:436    .text.calculate_mandelbrot_double:00000000 calculate_mandelbrot_double
     /tmp/ccEr2V2P.s:741    .text.calculate_mandelbrot_double:00000168 $d
     /tmp/ccEr2V2P.s:749    .text.Error_Handler:00000000 $t
     /tmp/ccEr2V2P.s:755    .text.Error_Handler:00000000 Error_Handler
     /tmp/ccEr2V2P.s:787    .text.SystemClock_Config:00000000 $t
     /tmp/ccEr2V2P.s:793    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccEr2V2P.s:880    .text.main:00000000 $t
     /tmp/ccEr2V2P.s:886    .text.main:00000000 main
     /tmp/ccEr2V2P.s:1034   .text.main:000000a0 $d
     /tmp/ccEr2V2P.s:1084   .data.image_sizes:00000000 image_sizes
     /tmp/ccEr2V2P.s:1056   .bss.start_time:00000000 start_time
     /tmp/ccEr2V2P.s:1049   .bss.end_time:00000000 end_time
     /tmp/ccEr2V2P.s:1063   .bss.completed_executions:00000000 completed_executions
     /tmp/ccEr2V2P.s:1077   .bss.executions:00000000 executions
     /tmp/ccEr2V2P.s:1070   .bss.checksums:00000000 checksums
     /tmp/ccEr2V2P.s:1046   .bss.end_time:00000000 $d
     /tmp/ccEr2V2P.s:1053   .bss.start_time:00000000 $d
     /tmp/ccEr2V2P.s:1060   .bss.completed_executions:00000000 $d
     /tmp/ccEr2V2P.s:1067   .bss.checksums:00000000 $d
     /tmp/ccEr2V2P.s:1074   .bss.executions:00000000 $d
     /tmp/ccEr2V2P.s:1081   .data.image_sizes:00000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_WritePin
HAL_GPIO_Init
__aeabi_ldivmod
__aeabi_lmul
__aeabi_i2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_dsub
__aeabi_dadd
__aeabi_dcmple
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_GetTick
HAL_Delay
